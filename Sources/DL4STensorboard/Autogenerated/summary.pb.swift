// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/summary.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metadata associated with a series of Summary data
struct Tensorflow_SummaryDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hint on how plugins should process the data in this series.
  /// Supported values include "scalar", "histogram", "image", "audio"
  var typeHint: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Serialization format for histogram module in
/// core/lib/histogram/histogram.h
struct Tensorflow_HistogramProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var min: Double = 0

  var max: Double = 0

  var num: Double = 0

  var sum: Double = 0

  var sumSquares: Double = 0

  /// Parallel arrays encoding the bucket boundaries and the bucket values.
  /// bucket(i) is the count for the bucket i.  The range for
  /// a bucket is:
  ///   i == 0:  -DBL_MAX .. bucket_limit(0)
  ///   i != 0:  bucket_limit(i-1) .. bucket_limit(i)
  var bucketLimit: [Double] = []

  var bucket: [Double] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A SummaryMetadata encapsulates information on which plugins are able to make
/// use of a certain summary value.
struct Tensorflow_SummaryMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of plugin data. A single summary value instance may be used by more
  /// than 1 plugin.
  var pluginData: [Tensorflow_SummaryMetadata.PluginData] = []

  /// Display name for viewing in TensorBoard.
  var displayName: String = String()

  /// Longform readable description of the summary sequence. Markdown supported.
  var summaryDescription: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PluginData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name of the plugin this data pertains to.
    var pluginName: String = String()

    /// The content to store for the plugin. The best practice is for this JSON
    /// string to be the canonical JSON serialization of a protocol buffer
    /// defined by the plugin. Converting that protobuf to and from JSON is the
    /// responsibility of the plugin code, and is not enforced by
    /// TensorFlow/TensorBoard.
    var content: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

/// A Summary is a set of named values to be displayed by the
/// visualizer.
///
/// Summaries are produced regularly during training, as controlled by
/// the "summary_interval_secs" attribute of the training operation.
/// Summaries are also produced at the end of an evaluation.
struct Tensorflow_Summary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Set of values for the summary.
  var value: [Tensorflow_Summary.Value] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Image {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Dimensions of the image.
    var height: Int32 = 0

    var width: Int32 = 0

    /// Valid colorspace values are
    ///   1 - grayscale
    ///   2 - grayscale + alpha
    ///   3 - RGB
    ///   4 - RGBA
    ///   5 - DIGITAL_YUV
    ///   6 - BGRA
    var colorspace: Int32 = 0

    /// Image data in encoded format.  All image formats supported by
    /// image_codec::CoderUtil can be stored here.
    var encodedImageString: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Audio {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Sample rate of the audio in Hz.
    var sampleRate: Float = 0

    /// Number of channels of audio.
    var numChannels: Int64 = 0

    /// Length of the audio in frames (samples per channel).
    var lengthFrames: Int64 = 0

    /// Encoded audio data and its associated RFC 2045 content type (e.g.
    /// "audio/wav").
    var encodedAudioString: Data = SwiftProtobuf.Internal.emptyData

    var contentType: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Value {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// This field is deprecated and will not be set.
    var nodeName: String = String()

    /// Tag name for the data. Used by TensorBoard plugins to organize data. Tags
    /// are often organized by scope (which contains slashes to convey
    /// hierarchy). For example: foo/bar/0
    var tag: String = String()

    /// Contains metadata on the summary value such as which plugins may use it.
    /// Take note that many summary values may lack a metadata field. This is
    /// because the FileWriter only keeps a metadata object on the first summary
    /// value with a certain tag for each tag. TensorBoard then remembers which
    /// tags are associated with which plugins. This saves space.
    var metadata: Tensorflow_SummaryMetadata {
      get {return _metadata ?? Tensorflow_SummaryMetadata()}
      set {_metadata = newValue}
    }
    /// Returns true if `metadata` has been explicitly set.
    var hasMetadata: Bool {return self._metadata != nil}
    /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
    mutating func clearMetadata() {self._metadata = nil}

    /// Value associated with the tag.
    var value: Tensorflow_Summary.Value.OneOf_Value? = nil

    var simpleValue: Float {
      get {
        if case .simpleValue(let v)? = value {return v}
        return 0
      }
      set {value = .simpleValue(newValue)}
    }

    var obsoleteOldStyleHistogram: Data {
      get {
        if case .obsoleteOldStyleHistogram(let v)? = value {return v}
        return SwiftProtobuf.Internal.emptyData
      }
      set {value = .obsoleteOldStyleHistogram(newValue)}
    }

    var image: Tensorflow_Summary.Image {
      get {
        if case .image(let v)? = value {return v}
        return Tensorflow_Summary.Image()
      }
      set {value = .image(newValue)}
    }

    var histo: Tensorflow_HistogramProto {
      get {
        if case .histo(let v)? = value {return v}
        return Tensorflow_HistogramProto()
      }
      set {value = .histo(newValue)}
    }

    var audio: Tensorflow_Summary.Audio {
      get {
        if case .audio(let v)? = value {return v}
        return Tensorflow_Summary.Audio()
      }
      set {value = .audio(newValue)}
    }

    var tensor: Tensorflow_TensorProto {
      get {
        if case .tensor(let v)? = value {return v}
        return Tensorflow_TensorProto()
      }
      set {value = .tensor(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Value associated with the tag.
    enum OneOf_Value: Equatable {
      case simpleValue(Float)
      case obsoleteOldStyleHistogram(Data)
      case image(Tensorflow_Summary.Image)
      case histo(Tensorflow_HistogramProto)
      case audio(Tensorflow_Summary.Audio)
      case tensor(Tensorflow_TensorProto)

    #if !swift(>=4.1)
      static func ==(lhs: Tensorflow_Summary.Value.OneOf_Value, rhs: Tensorflow_Summary.Value.OneOf_Value) -> Bool {
        switch (lhs, rhs) {
        case (.simpleValue(let l), .simpleValue(let r)): return l == r
        case (.obsoleteOldStyleHistogram(let l), .obsoleteOldStyleHistogram(let r)): return l == r
        case (.image(let l), .image(let r)): return l == r
        case (.histo(let l), .histo(let r)): return l == r
        case (.audio(let l), .audio(let r)): return l == r
        case (.tensor(let l), .tensor(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _metadata: Tensorflow_SummaryMetadata? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_SummaryDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SummaryDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "type_hint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.typeHint)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.typeHint.isEmpty {
      try visitor.visitSingularStringField(value: self.typeHint, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_SummaryDescription, rhs: Tensorflow_SummaryDescription) -> Bool {
    if lhs.typeHint != rhs.typeHint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_HistogramProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HistogramProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "min"),
    2: .same(proto: "max"),
    3: .same(proto: "num"),
    4: .same(proto: "sum"),
    5: .standard(proto: "sum_squares"),
    6: .standard(proto: "bucket_limit"),
    7: .same(proto: "bucket"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.min)
      case 2: try decoder.decodeSingularDoubleField(value: &self.max)
      case 3: try decoder.decodeSingularDoubleField(value: &self.num)
      case 4: try decoder.decodeSingularDoubleField(value: &self.sum)
      case 5: try decoder.decodeSingularDoubleField(value: &self.sumSquares)
      case 6: try decoder.decodeRepeatedDoubleField(value: &self.bucketLimit)
      case 7: try decoder.decodeRepeatedDoubleField(value: &self.bucket)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.min != 0 {
      try visitor.visitSingularDoubleField(value: self.min, fieldNumber: 1)
    }
    if self.max != 0 {
      try visitor.visitSingularDoubleField(value: self.max, fieldNumber: 2)
    }
    if self.num != 0 {
      try visitor.visitSingularDoubleField(value: self.num, fieldNumber: 3)
    }
    if self.sum != 0 {
      try visitor.visitSingularDoubleField(value: self.sum, fieldNumber: 4)
    }
    if self.sumSquares != 0 {
      try visitor.visitSingularDoubleField(value: self.sumSquares, fieldNumber: 5)
    }
    if !self.bucketLimit.isEmpty {
      try visitor.visitPackedDoubleField(value: self.bucketLimit, fieldNumber: 6)
    }
    if !self.bucket.isEmpty {
      try visitor.visitPackedDoubleField(value: self.bucket, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_HistogramProto, rhs: Tensorflow_HistogramProto) -> Bool {
    if lhs.min != rhs.min {return false}
    if lhs.max != rhs.max {return false}
    if lhs.num != rhs.num {return false}
    if lhs.sum != rhs.sum {return false}
    if lhs.sumSquares != rhs.sumSquares {return false}
    if lhs.bucketLimit != rhs.bucketLimit {return false}
    if lhs.bucket != rhs.bucket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_SummaryMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SummaryMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plugin_data"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "summary_description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pluginData)
      case 2: try decoder.decodeSingularStringField(value: &self.displayName)
      case 3: try decoder.decodeSingularStringField(value: &self.summaryDescription)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pluginData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pluginData, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.summaryDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.summaryDescription, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_SummaryMetadata, rhs: Tensorflow_SummaryMetadata) -> Bool {
    if lhs.pluginData != rhs.pluginData {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.summaryDescription != rhs.summaryDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_SummaryMetadata.PluginData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorflow_SummaryMetadata.protoMessageName + ".PluginData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plugin_name"),
    2: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pluginName)
      case 2: try decoder.decodeSingularStringField(value: &self.content)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pluginName.isEmpty {
      try visitor.visitSingularStringField(value: self.pluginName, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_SummaryMetadata.PluginData, rhs: Tensorflow_SummaryMetadata.PluginData) -> Bool {
    if lhs.pluginName != rhs.pluginName {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Summary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Summary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_Summary, rhs: Tensorflow_Summary) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Summary.Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorflow_Summary.protoMessageName + ".Image"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "width"),
    3: .same(proto: "colorspace"),
    4: .standard(proto: "encoded_image_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.height)
      case 2: try decoder.decodeSingularInt32Field(value: &self.width)
      case 3: try decoder.decodeSingularInt32Field(value: &self.colorspace)
      case 4: try decoder.decodeSingularBytesField(value: &self.encodedImageString)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if self.colorspace != 0 {
      try visitor.visitSingularInt32Field(value: self.colorspace, fieldNumber: 3)
    }
    if !self.encodedImageString.isEmpty {
      try visitor.visitSingularBytesField(value: self.encodedImageString, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_Summary.Image, rhs: Tensorflow_Summary.Image) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.width != rhs.width {return false}
    if lhs.colorspace != rhs.colorspace {return false}
    if lhs.encodedImageString != rhs.encodedImageString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Summary.Audio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorflow_Summary.protoMessageName + ".Audio"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sample_rate"),
    2: .standard(proto: "num_channels"),
    3: .standard(proto: "length_frames"),
    4: .standard(proto: "encoded_audio_string"),
    5: .standard(proto: "content_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.sampleRate)
      case 2: try decoder.decodeSingularInt64Field(value: &self.numChannels)
      case 3: try decoder.decodeSingularInt64Field(value: &self.lengthFrames)
      case 4: try decoder.decodeSingularBytesField(value: &self.encodedAudioString)
      case 5: try decoder.decodeSingularStringField(value: &self.contentType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sampleRate != 0 {
      try visitor.visitSingularFloatField(value: self.sampleRate, fieldNumber: 1)
    }
    if self.numChannels != 0 {
      try visitor.visitSingularInt64Field(value: self.numChannels, fieldNumber: 2)
    }
    if self.lengthFrames != 0 {
      try visitor.visitSingularInt64Field(value: self.lengthFrames, fieldNumber: 3)
    }
    if !self.encodedAudioString.isEmpty {
      try visitor.visitSingularBytesField(value: self.encodedAudioString, fieldNumber: 4)
    }
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_Summary.Audio, rhs: Tensorflow_Summary.Audio) -> Bool {
    if lhs.sampleRate != rhs.sampleRate {return false}
    if lhs.numChannels != rhs.numChannels {return false}
    if lhs.lengthFrames != rhs.lengthFrames {return false}
    if lhs.encodedAudioString != rhs.encodedAudioString {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Summary.Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorflow_Summary.protoMessageName + ".Value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "node_name"),
    1: .same(proto: "tag"),
    9: .same(proto: "metadata"),
    2: .standard(proto: "simple_value"),
    3: .standard(proto: "obsolete_old_style_histogram"),
    4: .same(proto: "image"),
    5: .same(proto: "histo"),
    6: .same(proto: "audio"),
    8: .same(proto: "tensor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.tag)
      case 2:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {self.value = .simpleValue(v)}
      case 3:
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.value = .obsoleteOldStyleHistogram(v)}
      case 4:
        var v: Tensorflow_Summary.Image?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .image(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .image(v)}
      case 5:
        var v: Tensorflow_HistogramProto?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .histo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .histo(v)}
      case 6:
        var v: Tensorflow_Summary.Audio?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .audio(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .audio(v)}
      case 7: try decoder.decodeSingularStringField(value: &self.nodeName)
      case 8:
        var v: Tensorflow_TensorProto?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .tensor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .tensor(v)}
      case 9: try decoder.decodeSingularMessageField(value: &self._metadata)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 1)
    }
    switch self.value {
    case .simpleValue(let v)?:
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    case .obsoleteOldStyleHistogram(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    case .image(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .histo(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .audio(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case nil: break
    default: break
    }
    if !self.nodeName.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeName, fieldNumber: 7)
    }
    if case .tensor(let v)? = self.value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorflow_Summary.Value, rhs: Tensorflow_Summary.Value) -> Bool {
    if lhs.nodeName != rhs.nodeName {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
